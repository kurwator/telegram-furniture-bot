from sqlalchemy.orm import Session
from models import Product, Category, City
from typing import List, Dict, Any, Optional

def get_all_categories(db: Session) -> List[Category]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    return db.query(Category).all()

def get_category_by_id(db: Session, category_id: int) -> Optional[Category]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID."""
    return db.query(Category).filter(Category.id == category_id).first()

def get_products_by_category(db: Session, category_id: int) -> List[Product]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    return db.query(Product).filter(Product.category_id == category_id).all()

def get_product_by_id(db: Session, product_id: int) -> Optional[Product]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ ID."""
    return db.query(Product).filter(Product.id == product_id).first()

def get_product_by_code(db: Session, product_code: str) -> Optional[Product]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ –∫–æ–¥—É."""
    return db.query(Product).filter(Product.product_code == product_code).first()

def get_all_cities(db: Session) -> List[City]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤."""
    return db.query(City).all()

def get_city_by_id(db: Session, city_id: int) -> Optional[City]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ ID."""
    return db.query(City).filter(City.id == city_id).first()

def get_products_by_city(db: Session, city: str) -> List[Product]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ."""
    return db.query(Product).filter(Product.city.ilike(f"%{city}%")).all()

def get_products_by_manufacturer(db: Session, manufacturer: str) -> List[Product]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è."""
    return db.query(Product).filter(Product.manufacturer.ilike(f"%{manufacturer}%")).all()

def get_all_manufacturers(db: Session) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π."""
    products = db.query(Product.manufacturer).distinct().all()
    return [p[0] for p in products if p[0]]

def get_all_cities_from_products(db: Session) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤."""
    products = db.query(Product.city).distinct().all()
    return [p[0] for p in products if p[0]]

def format_product_name_with_price(product: Product) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —Ü–µ–Ω–æ–π."""
    return f"{product.name} {int(product.price)}—Ä."

def get_product_details(product: Product) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ."""
    details = {
        "id": product.id,
        "code": product.product_code,
        "name": product.name,
        "price": product.price,
        "manufacturer": product.manufacturer,
        "size": product.size,
        "city": product.city,
        "description": product.description,
        "image_path": product.image_path,
        "category_id": product.category_id,
        "category_name": product.category.name if product.category else None,
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_name = product.category.name.lower() if product.category else ""
    
    if "–¥–∏–≤–∞–Ω" in category_name:
        details.update({
            "form": product.form,
            "mechanism": product.mechanism,
            "filling": product.filling
        })
    elif "–∫—Ä–æ–≤–∞—Ç—å" in category_name:
        details.update({
            "lifting_mechanism": "–ï—Å—Ç—å" if product.lifting_mechanism else "–ù–µ—Ç"
        })
    elif "–ø—É—Ñ" in category_name:
        details.update({
            "has_box": "–ï—Å—Ç—å" if product.has_box else "–ù–µ—Ç"
        })
    
    return details

def get_product_display_text(product: Product) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ."""
    category_name = product.category.name if product.category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    
    text = (
        f"üõãÔ∏è *{format_product_name_with_price(product)}*\n\n"
        f"–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: {product.product_code}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {product.manufacturer or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–†–∞–∑–º–µ—Ä: {product.size or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ì–æ—Ä–æ–¥: {product.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_name = category_name.lower()
    
    if "–¥–∏–≤–∞–Ω" in category_name:
        text += (
            f"–§–æ—Ä–º–∞: {product.form or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–ú–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è: {product.mechanism or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: {product.filling or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        )
    elif "–∫—Ä–æ–≤–∞—Ç—å" in category_name:
        text += f"–ü–æ–¥—ä–µ–º–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º: {'–ï—Å—Ç—å' if product.lifting_mechanism else '–ù–µ—Ç'}\n\n"
    elif "–ø—É—Ñ" in category_name:
        text += f"–Ø—â–∏–∫: {'–ï—Å—Ç—å' if product.has_box else '–ù–µ—Ç'}\n\n"
    
    text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    
    return text
