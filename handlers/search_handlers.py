from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session
from database import get_db
from auth import get_user, has_active_subscription, check_auth
from search import (
    search_by_price, search_by_manufacturer, search_by_city,
    search_by_name, search_by_code, advanced_search,
    get_all_manufacturers, get_all_cities
)
from catalog import get_product_by_id, format_product_name_with_price, get_product_display_text
from models import Product

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SEARCH_TYPE = 1
QUICK_SEARCH = 2
QUICK_SEARCH_VALUE = 3
SEARCH_RESULTS = 4
PRODUCT_DETAIL = 5

async def show_search_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∏—Å–∫–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await check_auth(update, context):
        return ConversationHandler.END
    
    if update.callback_query:
        await update.callback_query.answer()
        message = update.callback_query.message
    else:
        message = update.message
    
    search_message = (
        "üîç *–ü–æ–∏—Å–∫ –º–µ–±–µ–ª–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ —Ü–µ–Ω–µ", callback_data="quick_search_price")],
        [InlineKeyboardButton("üè≠ –ü–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é", callback_data="quick_search_manufacturer")],
        [InlineKeyboardButton("üèôÔ∏è –ü–æ –≥–æ—Ä–æ–¥—É", callback_data="quick_search_city")],
        [InlineKeyboardButton("üìù –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="quick_search_name")],
        [InlineKeyboardButton("üî¢ –ü–æ –∫–æ–¥—É —Ç–æ–≤–∞—Ä–∞", callback_data="quick_search_code")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await message.edit_text(search_message, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await message.reply_text(search_message, reply_markup=reply_markup, parse_mode="Markdown")
    
    return SEARCH_TYPE

async def quick_search_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–µ–Ω–µ."""
    query = update.callback_query
    await query.answer()
    
    context.user_data["search_type"] = "price"
    
    price_message = (
        "üí∞ *–ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ü–µ–Ω–æ–≤—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("–î–æ 5 000‚ÇΩ", callback_data="price_5000")],
        [InlineKeyboardButton("–î–æ 10 000‚ÇΩ", callback_data="price_10000")],
        [InlineKeyboardButton("–î–æ 20 000‚ÇΩ", callback_data="price_20000")],
        [InlineKeyboardButton("–î–æ 30 000‚ÇΩ", callback_data="price_30000")],
        [InlineKeyboardButton("–î–æ 50 000‚ÇΩ", callback_data="price_50000")],
        [InlineKeyboardButton("–õ—é–±–∞—è —Ü–µ–Ω–∞", callback_data="price_any")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="search")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(price_message, reply_markup=reply_markup, parse_mode="Markdown")
    
    return QUICK_SEARCH

async def quick_search_manufacturer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    context.user_data["search_type"] = "manufacturer"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
    db = next(get_db())
    manufacturers = get_all_manufacturers(db)
    
    manufacturer_message = (
        "üè≠ *–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
    keyboard = []
    for manufacturer in manufacturers:
        keyboard.append([InlineKeyboardButton(manufacturer, callback_data=f"manufacturer_{manufacturer}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="search")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(manufacturer_message, reply_markup=reply_markup, parse_mode="Markdown")
    
    return QUICK_SEARCH

async def quick_search_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    context.user_data["search_type"] = "city"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    db = next(get_db())
    cities = get_all_cities(db)
    
    city_message = (
        "üèôÔ∏è *–ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    keyboard = []
    for city in cities:
        keyboard.append([InlineKeyboardButton(city, callback_data=f"city_{city}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="search")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(city_message, reply_markup=reply_markup, parse_mode="Markdown")
    
    return QUICK_SEARCH

async def quick_search_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    context.user_data["search_type"] = "name"
    
    name_message = (
        "üìù *–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:"
    )
    
    await query.message.edit_text(
        name_message,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="search")]]),
        parse_mode="Markdown"
    )
    
    return QUICK_SEARCH_VALUE

async def quick_search_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    context.user_data["search_type"] = "code"
    
    code_message = (
        "üî¢ *–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É —Ç–æ–≤–∞—Ä–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å:"
    )
    
    await query.message.edit_text(
        code_message,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="search")]]),
        parse_mode="Markdown"
    )
    
    return QUICK_SEARCH_VALUE

async def process_search_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    search_type = context.user_data.get("search_type")
    search_value = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    context.user_data["search_value"] = search_value
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    db = next(get_db())
    
    if search_type == "name":
        products = search_by_name(db, search_value)
    elif search_type == "code":
        products = search_by_code(db, search_value)
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search")]])
        )
        return SEARCH_TYPE
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    await show_search_results(update, context, products)
    
    return SEARCH_RESULTS

async def process_search_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    search_type = context.user_data.get("search_type")
    callback_data = query.data
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    db = next(get_db())
    
    if search_type == "price":
        if callback_data == "price_any":
            max_price = None
        else:
            max_price = float(callback_data.split("_")[1])
        products = search_by_price(db, max_price)
    elif search_type == "manufacturer":
        manufacturer = callback_data.split("_", 1)[1]
        products = search_by_manufacturer(db, manufacturer)
    elif search_type == "city":
        city = callback_data.split("_", 1)[1]
        products = search_by_city(db, city)
    else:
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search")]])
        )
        return SEARCH_TYPE
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    await show_search_results_callback(update, context, products)
    
    return SEARCH_RESULTS

async def show_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE, products):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞."""
    search_type = context.user_data.get("search_type")
    search_value = context.user_data.get("search_value", "")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    if search_type == "name":
        search_message = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:* {search_value}\n\n"
    elif search_type == "code":
        search_message = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É:* {search_value}\n\n"
    else:
        search_message = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n"
    
    search_message += f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n\n"
    
    if not products:
        search_message += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
    else:
        search_message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
    keyboard = []
    for product in sorted(products, key=lambda p: p.price):
        keyboard.append([InlineKeyboardButton(
            format_product_name_with_price(product), 
            callback_data=f"product_{product.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(search_message, reply_markup=reply_markup, parse_mode="Markdown")

async def show_search_results_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, products):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ callback."""
    query = update.callback_query
    search_type = context.user_data.get("search_type")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    if search_type == "price":
        if query.data == "price_any":
            search_message = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–µ–Ω–µ:* –ª—é–±–∞—è\n\n"
        else:
            max_price = query.data.split("_")[1]
            search_message = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–µ–Ω–µ:* –¥–æ {max_price}‚ÇΩ\n\n"
    elif search_type == "manufacturer":
        manufacturer = query.data.split("_", 1)[1]
        search_message = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é:* {manufacturer}\n\n"
    elif search_type == "city":
        city = query.data.split("_", 1)[1]
        search_message = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É:* {city}\n\n"
    else:
        search_message = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n"
    
    search_message += f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n\n"
    
    if not products:
        search_message += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
    else:
        search_message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
    keyboard = []
    for product in sorted(products, key=lambda p: p.price):
        keyboard.append([InlineKeyboardButton(
            format_product_name_with_price(product), 
            callback_data=f"product_{product.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(search_message, reply_markup=reply_markup, parse_mode="Markdown")

async def show_product_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ."""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    db = next(get_db())
    product = get_product_by_id(db, product_id)
    
    if not product:
        await query.message.edit_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø–æ–∏—Å–∫—É.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search")]])
        )
        return SEARCH_RESULTS
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    product_text = get_product_display_text(product)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")],
        [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if product.image_path:
        try:
            with open(product.image_path, 'rb') as photo:
                await query.message.reply_photo(
                    photo=photo,
                    caption=product_text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            await query.message.delete()
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await query.message.edit_text(
                product_text + "\n\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await query.message.edit_text(
            product_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    return PRODUCT_DETAIL

async def back_to_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥–ª–∏ –±—ã—Ç—å –ø–æ—Ç–µ—Ä—è–Ω—ã
    await show_search_menu(update, context)
    
    return SEARCH_TYPE
