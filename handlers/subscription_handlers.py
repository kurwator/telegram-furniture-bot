from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session
from database import get_db
from auth import get_user, has_active_subscription
from subscription import get_subscription_info, extend_subscription, cancel_subscription
from models import SubscriptionStatus

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SUBSCRIPTION_MENU = 1
SUBSCRIPTION_PERIOD = 2
SUBSCRIPTION_PAYMENT = 3
SUBSCRIPTION_CONFIRMATION = 4

async def show_subscription_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    user = update.effective_user
    db = next(get_db())
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription_info = get_subscription_info(db, get_user(db, str(user.id)).id)
    
    if subscription_info["status"] == "active":
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        subscription_text = (
            f"üëë *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞*\n\n"
            f"–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_info['end_date'].strftime('%d.%m.%Y')}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {subscription_info['days_left']}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ –º–µ—Å—è—Ü", callback_data="subscribe_MONTH")],
            [InlineKeyboardButton("üìÜ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ –≥–æ–¥", callback_data="subscribe_YEAR")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_text = (
            "üîí *–ü–æ–¥–ø–∏—Å–∫–∞*\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü - 500‚ÇΩ", callback_data="subscribe_MONTH")],
            [InlineKeyboardButton("üìÜ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ - 5000‚ÇΩ", callback_data="subscribe_YEAR")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(
            subscription_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            subscription_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    return SUBSCRIPTION_MENU

async def select_subscription_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    subscription_type = query.data.split("_")[1]
    context.user_data["subscription_type"] = subscription_type
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –ø–µ—Ä–∏–æ–¥
    if subscription_type == "MONTH":
        price = 500
        period = "1 –º–µ—Å—è—Ü"
    elif subscription_type == "YEAR":
        price = 5000
        period = "1 –≥–æ–¥"
    else:
        # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")]])
        )
        return SUBSCRIPTION_MENU
    
    payment_text = (
        f"üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
        f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {period}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="payment_card")],
        [InlineKeyboardButton("üè¶ –°–ë–ü", callback_data="payment_sbp")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        payment_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SUBSCRIPTION_PERIOD

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()
    
    payment_method = query.data.split("_")[1]
    context.user_data["payment_method"] = payment_method
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    
    payment_text = (
        f"‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n"
        f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é", callback_data="payment_confirmed")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        payment_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SUBSCRIPTION_PAYMENT

async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É."""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    db = next(get_db())
    db_user = get_user(db, str(user.id))
    
    if not db_user:
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
        )
        return ConversationHandler.END
    
    subscription_type = context.user_data.get("subscription_type", "MONTH")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscription = extend_subscription(db, db_user.id, subscription_type, payment_id="manual_payment")
    
    if subscription:
        confirmation_text = (
            f"üéâ *–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
            f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {'1 –º–µ—Å—è—Ü' if subscription_type == 'MONTH' else '1 –≥–æ–¥'}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.end_date.strftime('%d.%m.%Y')}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –º–µ–±–µ–ª–∏. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
        )
        
        keyboard = [
            [InlineKeyboardButton("üõãÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            confirmation_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
        )
    
    return SUBSCRIPTION_CONFIRMATION

async def cancel_subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    db = next(get_db())
    db_user = get_user(db, str(user.id))
    
    if not db_user:
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
        )
        return ConversationHandler.END
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
    confirmation_text = (
        "‚ö†Ô∏è *–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n"
        "–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É –º–µ–±–µ–ª–∏."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="subscription")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        confirmation_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SUBSCRIPTION_MENU

async def confirm_cancel_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    db = next(get_db())
    db_user = get_user(db, str(user.id))
    
    if not db_user:
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
        )
        return ConversationHandler.END
    
    # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    success = cancel_subscription(db, db_user.id)
    
    if success:
        await query.message.edit_text(
            "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
        )
    else:
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]])
        )
    
    return ConversationHandler.END
