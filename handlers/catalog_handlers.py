from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session
from database import get_db
from auth import get_user, has_active_subscription, check_auth
from catalog import (
    get_all_categories, get_category_by_id, get_products_by_category,
    get_product_by_id, format_product_name_with_price, get_product_display_text
)
from models import Product

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CATEGORY_SELECTION = 1
PRODUCT_SELECTION = 2
PRODUCT_DETAIL = 3
CATEGORY_ACTION = 4

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–±–µ–ª–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await check_auth(update, context):
        return ConversationHandler.END
    
    if update.callback_query:
        await update.callback_query.answer()
        message = update.callback_query.message
    else:
        message = update.message
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    categories = get_all_categories(db)
    
    catalog_message = (
        "üõãÔ∏è *–ö–∞—Ç–∞–ª–æ–≥ –º–µ–±–µ–ª–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = []
    for category in categories:
        emoji = get_category_emoji(category.name)
        keyboard.append([InlineKeyboardButton(f"{emoji} {category.name}", callback_data=f"category_{category.id}")])
    
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await message.edit_text(catalog_message, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await message.reply_text(catalog_message, reply_markup=reply_markup, parse_mode="Markdown")
    
    return CATEGORY_SELECTION

async def show_category_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –ø–æ–∏—Å–∫."""
    query = update.callback_query
    await query.answer()
    
    category_id = int(query.data.split("_")[1])
    context.user_data["selected_category_id"] = category_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    db = next(get_db())
    category = get_category_by_id(db, category_id)
    
    if not category:
        await query.message.edit_text(
            "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")]])
        )
        return CATEGORY_SELECTION
    
    emoji = get_category_emoji(category.name)
    action_message = (
        f"{emoji} *{category.name}*\n\n"
        f"{category.description or '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'}"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data=f"show_all_{category_id}")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"search_in_{category_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(action_message, reply_markup=reply_markup, parse_mode="Markdown")
    
    return CATEGORY_ACTION

async def show_category_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    action, category_id = query.data.split("_")[0], int(query.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä–∞—Ö
    db = next(get_db())
    category = get_category_by_id(db, category_id)
    
    if not category:
        await query.message.edit_text(
            "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")]])
        )
        return CATEGORY_SELECTION
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = get_products_by_category(db, category_id)
    
    emoji = get_category_emoji(category.name)
    products_message = (
        f"{emoji} *{category.name}*\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
    keyboard = []
    for product in sorted(products, key=lambda p: p.price):
        keyboard.append([InlineKeyboardButton(
            format_product_name_with_price(product), 
            callback_data=f"product_{product.id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"category_{category_id}")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(products_message, reply_markup=reply_markup, parse_mode="Markdown")
    
    return PRODUCT_SELECTION

async def show_product_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ."""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    db = next(get_db())
    product = get_product_by_id(db, product_id)
    
    if not product:
        await query.message.edit_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")]])
        )
        return PRODUCT_SELECTION
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    product_text = get_product_display_text(product)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f"show_all_{product.category_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if product.image_path:
        try:
            with open(product.image_path, 'rb') as photo:
                await query.message.reply_photo(
                    photo=photo,
                    caption=product_text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            await query.message.delete()
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await query.message.edit_text(
                product_text + "\n\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await query.message.edit_text(
            product_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    return PRODUCT_DETAIL

def get_category_emoji(category_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    category_emojis = {
        "–î–∏–≤–∞–Ω—ã": "üõãÔ∏è",
        "–ö—Ä–µ—Å–ª–∞": "üí∫",
        "–ü—É—Ñ—ã": "ü™ë",
        "–ö—Ä–æ–≤–∞—Ç–∏": "üõèÔ∏è",
        "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": "üß∏"
    }
    return category_emojis.get(category_name, "üì¶")
