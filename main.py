from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
import logging
import os
from dotenv import load_dotenv
from database import init_db, check_db_exists
from config import BOT_TOKEN
from handlers.auth_handlers import (
    start, auth_code_handler, show_main_menu, profile
)
from handlers.catalog_handlers import (
    show_catalog, show_category_action, show_category_products, 
    show_product_details as catalog_product_details
)
from handlers.search_handlers import (
    show_search_menu, quick_search_price, quick_search_manufacturer,
    quick_search_city, quick_search_name, quick_search_code,
    process_search_value, process_search_callback, show_product_details,
    back_to_results
)
from handlers.subscription_handlers import (
    show_subscription_menu, select_subscription_period, process_payment,
    confirm_payment, cancel_subscription_handler, confirm_cancel_subscription
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AUTH_CODE = 1
MAIN_MENU = 2
CATEGORY_SELECTION = 3
PRODUCT_SELECTION = 4
PRODUCT_DETAIL = 5
SEARCH_TYPE = 6
QUICK_SEARCH = 7
QUICK_SEARCH_VALUE = 8
SEARCH_RESULTS = 9
SUBSCRIPTION_MENU = 10
SUBSCRIPTION_PERIOD = 11
SUBSCRIPTION_PAYMENT = 12
SUBSCRIPTION_CONFIRMATION = 13
CATEGORY_ACTION = 14

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."""
    if update.callback_query:
        await update.callback_query.answer()
        message = update.callback_query.message
    else:
        message = update.message
    
    about_text = (
        "‚ÑπÔ∏è *–û –±–æ—Ç–µ*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É –º–µ–±–µ–ª–∏.\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –º–µ–±–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/catalog - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –º–µ–±–µ–ª–∏\n"
        "/search - –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞."
    )
    
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await message.edit_text(about_text, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await message.reply_text(about_text, reply_markup=reply_markup, parse_mode="Markdown")

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_menu":
        await show_main_menu(update, context)
        return MAIN_MENU
    elif query.data == "catalog":
        await show_catalog(update, context)
        return CATEGORY_SELECTION
    elif query.data == "search":
        await show_search_menu(update, context)
        return SEARCH_TYPE
    elif query.data == "about":
        await about(update, context)
        return MAIN_MENU
    elif query.data == "profile":
        await profile(update, context)
        return MAIN_MENU
    elif query.data == "subscription":
        await show_subscription_menu(update, context)
        return SUBSCRIPTION_MENU
    elif query.data == "cancel_subscription":
        await cancel_subscription_handler(update, context)
        return SUBSCRIPTION_MENU
    elif query.data == "confirm_cancel":
        await confirm_cancel_subscription(update, context)
        return MAIN_MENU
    elif query.data == "back_to_results":
        await show_search_menu(update, context)
        return SEARCH_TYPE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    if update.message:
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
    
    await show_main_menu(update, context)
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if not check_db_exists():
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    main_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            AUTH_CODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, auth_code_handler)
            ],
            MAIN_MENU: [
                CallbackQueryHandler(show_catalog, pattern="^catalog$"),
                CallbackQueryHandler(show_search_menu, pattern="^search$"),
                CallbackQueryHandler(about, pattern="^about$"),
                CallbackQueryHandler(profile, pattern="^profile$"),
                CallbackQueryHandler(show_subscription_menu, pattern="^subscription$"),
                CallbackQueryHandler(button)
            ],
            CATEGORY_SELECTION: [
                CallbackQueryHandler(show_category_action, pattern=r"^category_\d+$"),
                CallbackQueryHandler(button)
            ],
            CATEGORY_ACTION: [
                CallbackQueryHandler(show_category_products, pattern=r"^show_all_\d+$"),
                CallbackQueryHandler(button)
            ],
            PRODUCT_SELECTION: [
                CallbackQueryHandler(catalog_product_details, pattern=r"^product_\d+$"),
                CallbackQueryHandler(button)
            ],
            PRODUCT_DETAIL: [
                CallbackQueryHandler(button)
            ],
            SEARCH_TYPE: [
                CallbackQueryHandler(quick_search_price, pattern="^quick_search_price$"),
                CallbackQueryHandler(quick_search_manufacturer, pattern="^quick_search_manufacturer$"),
                CallbackQueryHandler(quick_search_city, pattern="^quick_search_city$"),
                CallbackQueryHandler(quick_search_name, pattern="^quick_search_name$"),
                CallbackQueryHandler(quick_search_code, pattern="^quick_search_code$"),
                CallbackQueryHandler(button)
            ],
            QUICK_SEARCH: [
                CallbackQueryHandler(process_search_callback, pattern=r"^price_\d+$"),
                CallbackQueryHandler(process_search_callback, pattern="^price_any$"),
                CallbackQueryHandler(process_search_callback, pattern=r"^manufacturer_"),
                CallbackQueryHandler(process_search_callback, pattern=r"^city_"),
                CallbackQueryHandler(button)
            ],
            QUICK_SEARCH_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_search_value)
            ],
            SEARCH_RESULTS: [
                CallbackQueryHandler(show_product_details, pattern=r"^product_\d+$"),
                CallbackQueryHandler(button)
            ],
            SUBSCRIPTION_MENU: [
                CallbackQueryHandler(select_subscription_period, pattern=r"^subscribe_\w+$"),
                CallbackQueryHandler(cancel_subscription_handler, pattern="^cancel_subscription$"),
                CallbackQueryHandler(button)
            ],
            SUBSCRIPTION_PERIOD: [
                CallbackQueryHandler(process_payment, pattern=r"^payment_\w+$"),
                CallbackQueryHandler(button)
            ],
            SUBSCRIPTION_PAYMENT: [
                CallbackQueryHandler(confirm_payment, pattern="^payment_confirmed$"),
                CallbackQueryHandler(button)
            ],
            SUBSCRIPTION_CONFIRMATION: [
                CallbackQueryHandler(button)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ 2

    application.add_handler(main_conv_handler)
    application.add_handler(CommandHandler("catalog", show_catalog))
    application.add_handler(CommandHandler("search", show_search_menu))
    application.add_handler(CommandHandler("subscription", show_subscription_menu))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("about", about))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è callback_query, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è ConversationHandler
    application.add_handler(CallbackQueryHandler(button))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()
